{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOk3rc/P+o+Pl8qy8NhDQHc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mosesamwoma/SCHOOL-MANAGEMENT-GROUUP-13/blob/main/pandass\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "id": "LWs2eO9-4JGY"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('/content/train.csv')"
      ],
      "metadata": {
        "id": "_hOW9iDi4T2d"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "_WvvVlWf4rB6",
        "outputId": "70707af3-70ab-46fb-bf1c-e5ef14a9b957"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cabin</th>\n",
              "      <td>687</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df.drop(columns=['Cabin'], inplace=True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "9UvrstcX9Q3U",
        "outputId": "97dc2aed-941b-4364-f667-8e2e2986e1f3"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Embarked  \n",
              "0        0         A/5 21171   7.2500        S  \n",
              "1        0          PC 17599  71.2833        C  \n",
              "2        0  STON/O2. 3101282   7.9250        S  \n",
              "3        0            113803  53.1000        S  \n",
              "4        0            373450   8.0500        S  \n",
              "..     ...               ...      ...      ...  \n",
              "886      0            211536  13.0000        S  \n",
              "887      0            112053  30.0000        S  \n",
              "888      2        W./C. 6607  23.4500        S  \n",
              "889      0            111369  30.0000        C  \n",
              "890      0            370376   7.7500        Q  \n",
              "\n",
              "[891 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7054778e-b769-41e4-a218-19a523bfe815\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7054778e-b769-41e4-a218-19a523bfe815')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7054778e-b769-41e4-a218-19a523bfe815 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7054778e-b769-41e4-a218-19a523bfe815');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d925eeab-f4a2-4893-934f-2e944981e340\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d925eeab-f4a2-4893-934f-2e944981e340')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d925eeab-f4a2-4893-934f-2e944981e340 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4b6f656c-02c7-4597-93d2-967efaff949f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4b6f656c-02c7-4597-93d2-967efaff949f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ew4peD1O6OQd",
        "outputId": "53c4b951-c40e-4eca-cee4-d3e2fd3b256b"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(891, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Age'].fillna(df['Age'].median(), inplace=True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "zeRWUBBd_m2_",
        "outputId": "f419b504-3186-48f8-b24e-95195938902c"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-432742771.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['Age'].fillna(df['Age'].median(), inplace=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female  28.0      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Embarked  \n",
              "0        0         A/5 21171   7.2500        S  \n",
              "1        0          PC 17599  71.2833        C  \n",
              "2        0  STON/O2. 3101282   7.9250        S  \n",
              "3        0            113803  53.1000        S  \n",
              "4        0            373450   8.0500        S  \n",
              "..     ...               ...      ...      ...  \n",
              "886      0            211536  13.0000        S  \n",
              "887      0            112053  30.0000        S  \n",
              "888      2        W./C. 6607  23.4500        S  \n",
              "889      0            111369  30.0000        C  \n",
              "890      0            370376   7.7500        Q  \n",
              "\n",
              "[891 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6be3f29-d22b-4f33-aca7-ef01f2095477\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>28.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6be3f29-d22b-4f33-aca7-ef01f2095477')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e6be3f29-d22b-4f33-aca7-ef01f2095477 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e6be3f29-d22b-4f33-aca7-ef01f2095477');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6f9dfa35-d711-47a5-916b-c7121bb3416b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f9dfa35-d711-47a5-916b-c7121bb3416b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6f9dfa35-d711-47a5-916b-c7121bb3416b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_254bfc3b-9c60-4e60-9be9-8f4247c7572d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_254bfc3b-9c60-4e60-9be9-8f4247c7572d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.019696550973194,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "YIf2bMzw_DFo",
        "outputId": "defee95f-9a22-4741-faf7-22779229ad1f"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Survived       0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       2\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Embarked'] = df['Embarked'].replace({'62': 's', '830': 's'}).fillna('Unknown')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "xhNs8fQ_Brq9",
        "outputId": "9ff84d5d-37a5-4822-dcc3-747307d3ff7e"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female  28.0      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Embarked  \n",
              "0        0         A/5 21171   7.2500        S  \n",
              "1        0          PC 17599  71.2833        C  \n",
              "2        0  STON/O2. 3101282   7.9250        S  \n",
              "3        0            113803  53.1000        S  \n",
              "4        0            373450   8.0500        S  \n",
              "..     ...               ...      ...      ...  \n",
              "886      0            211536  13.0000        S  \n",
              "887      0            112053  30.0000        S  \n",
              "888      2        W./C. 6607  23.4500        S  \n",
              "889      0            111369  30.0000        C  \n",
              "890      0            370376   7.7500        Q  \n",
              "\n",
              "[891 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36a64ca1-deef-405b-917c-105d5d83fdf6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>28.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36a64ca1-deef-405b-917c-105d5d83fdf6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-36a64ca1-deef-405b-917c-105d5d83fdf6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-36a64ca1-deef-405b-917c-105d5d83fdf6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a0661e1d-3deb-469c-b291-df79fb3a51e1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0661e1d-3deb-469c-b291-df79fb3a51e1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a0661e1d-3deb-469c-b291-df79fb3a51e1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_792e20d7-221f-486d-84b1-e507d2113589\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_792e20d7-221f-486d-84b1-e507d2113589 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.019696550973194,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"C\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "B3UD8MISCRty",
        "outputId": "4ba789f9-9f63-434e-bbf8-1090b76acbb9"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Survived       0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oGJUVtzoZh9l",
        "outputId": "587dca9a-c04a-4718-d551-fcd01deb161a"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.int64(0)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.plot()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "0AA3qdqVp86D",
        "outputId": "22adf20e-e841-49c3-9c3e-a3ee337862d3"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.plot(kind = 'scatter', x = 'Age', y = 'Fare')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "S4Es93TgqrnC",
        "outputId": "3849b68d-455a-47bd-db5b-ac11a968a92b"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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REREpGsMdoiIiEjXGOwQERGRrjHYISIiIl1jsENERES6xmCHiIiIdI3BDhEREekagx0iIiLSNQY7REREpGsMdoiIiEjXGOwQERGRrjHYISIiIl1jsENERES6xmCHiIiIdI3BDhEREekagx0iIiLSNQY7REREpGsMdoiIiEjXGOwQERGRrjHYISIiIl1jsENERES6xmCHiIiIdI3BDhEREekagx0iIiLSNQY7REREpGsMdoiIiEjXGOwQERGRrjHYISIiIl3TTLCzZMkSGAwGPPbYY9bHLl++jPz8fCQmJiI2NhZTp05FVVWV3esqKiowefJkREdHIyUlBU899RRaW1v9XHoiIiLSKk0EOwcOHMDf/vY3DB482O7xxx9/HB9++CE2btyIgoICnDlzBnfccYf1+ba2NkyePBnNzc3Ys2cP3nzzTaxduxaLFi3ydxWIiIhIowIe7NTX12P69On4+9//joSEBOvjJpMJq1evxp/+9CfcfPPNGDZsGNasWYM9e/Zg7969AIDPPvsMJ06cwNtvv43rr78et912G37/+99j+fLlaG5uDlSViIiISEMCHuzk5+dj8uTJmDBhgt3jRUVFaGlpsXt8wIAByMzMRGFhIQCgsLAQgwYNQmpqqnWbSZMmwWw24/jx45Lv2dTUBLPZbPePiIiI9CkskG++YcMGHDp0CAcOHHB6rrKyEhEREYiPj7d7PDU1FZWVldZtbAMdy/OW56QsXrwYzz//vJelJyIiomAQsJad06dP49FHH8W6devQpUsXv773ggULYDKZrP9Onz7t1/cnIiIi/wlYsFNUVITq6moMHToUYWFhCAsLQ0FBAZYuXYqwsDCkpqaiubkZdXV1dq+rqqpCWloaACAtLc1pdpblb8s2YiIjIxEXF2f3j4iIiPQpYMHOLbfcgqNHj6K4uNj6b/jw4Zg+fbr1/8PDw7F9+3bra0pKSlBRUYHc3FwAQG5uLo4ePYrq6mrrNtu2bUNcXByys7P9XiciIiLSnoCN2enatSsGDhxo91hMTAwSExOtj8+cORNz585Ft27dEBcXhzlz5iA3NxejRo0CAEycOBHZ2dm455578Morr6CyshILFy5Efn4+IiMj/V4nIiIi0p6ADlB2589//jNCQkIwdepUNDU1YdKkSVixYoX1+dDQUGzduhWzZs1Cbm4uYmJikJeXhxdeeCGApSYiIiItMQiCIAS6EIFmNpthNBphMpk4foeIiChIyL1+BzzPDhEREZEvMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawx2iIiISNcY7BAREZGuMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawx2iIiISNcY7BAREZGuMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawx2iIiISNcY7BAREZGuMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawx2iIiISNcY7BAREZGuMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawx2iIiISNcY7BAREZGuMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawx2iIiISNcY7BAREZGuMdghIiIiXWOwQ0RERLrGYIeIiIh0jcEOERER6RqDHSIiItI1BjtERESkawENdlauXInBgwcjLi4OcXFxyM3Nxccff2x9/vLly8jPz0diYiJiY2MxdepUVFVV2e2joqICkydPRnR0NFJSUvDUU0+htbXV31UhIiIijQposNOjRw8sWbIERUVFOHjwIG6++WbcfvvtOH78OADg8ccfx4cffoiNGzeioKAAZ86cwR133GF9fVtbGyZPnozm5mbs2bMHb775JtauXYtFixYFqkpERESkMQZBEIRAF8JWt27d8Oqrr+LOO+9EcnIy1q9fjzvvvBMA8PXXX+Oaa65BYWEhRo0ahY8//hg//elPcebMGaSmpgIAVq1ahXnz5qGmpgYRERGi79HU1ISmpibr32azGRkZGTCZTIiLi/N9JYmIiMhrZrMZRqPR7fVbM2N22trasGHDBjQ0NCA3NxdFRUVoaWnBhAkTrNsMGDAAmZmZKCwsBAAUFhZi0KBB1kAHACZNmgSz2WxtHRKzePFiGI1G67+MjAzfVYyIiIgCKuDBztGjRxEbG4vIyEg8/PDDeP/995GdnY3KykpEREQgPj7ebvvU1FRUVlYCACorK+0CHcvzluekLFiwACaTyfrv9OnT6laKiIiINCMs0AXo378/iouLYTKZ8N577yEvLw8FBQU+fc/I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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Age\"].plot(kind = 'hist')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "5r3TWfXYsP15",
        "outputId": "d4e3f507-25df-4cae-ef0b-812714f71c50"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 72
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Sex\"].value_counts().plot(kind='pie')\n",
        "plt.title('Gender Distribution')\n",
        "plt.xlabel('Gender')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "ETYPAFopt3We",
        "outputId": "3aa7bd3c-9e91-4fe5-b6c4-1e50b39b8ab2"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}